package com.example.backendtaskmanager.Security.Config;import com.example.backendtaskmanager.Security.Jwt.JwtAuthenticationFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import org.springframework.security.web.util.matcher.OrRequestMatcher;import org.springframework.security.web.util.matcher.RequestMatcher;@Configuration@EnableWebSecuritypublic class SecurityConfig {    @Autowired    AuthenticationProvider authProvider;    @Autowired    JwtAuthenticationFilter jwtAuthenticationFilter;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http.csrf(csrf -> csrf.disable())                .authorizeHttpRequests(authorize -> authorize                        .requestMatchers(publicEndPoints()).permitAll()                        .anyRequest().authenticated())                .sessionManagement(session -> session                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .authenticationProvider(authProvider)                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    private RequestMatcher publicEndPoints() {        return new OrRequestMatcher(                new AntPathRequestMatcher("/api/auth/**")        );    }}